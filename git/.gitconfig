
# Local/private config goes in the include, primarily the "user" settings
[include]

	path = ~/.config/git/.gitconfig_local

[branch]

	# Show most recently changed branches first.
	sort = -committerdate

[checkout]

	# Set default remote to origin, which helps with working with multiple remotes
	defaultRemote = origin

[core]

	# Use custom `.gitignore`.
	excludesfile = ~/.config/git/.gitignore

	# Treat spaces before tabs and all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS.
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = green
	changed = cyan
	untracked = yellow
	deleted = red

[diff]

	# Detect copies as well as renames.
	renames = copies

[fetch]

	# Prune branches and tags that no longer exist remote.
	prune = true
	pruneTags = true

[init]

	defaultBranch = main

[alias]

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch --all
	remotes = remote --verbose

	# List aliases.
	aliases = config --get-regexp alias

	# List contributors with number of commits.
	contributors = shortlog --summary --numbered

	# Show the user email for the current repository.
	whoami = config user.email

	# Amend the currently staged files to the latest commit.
	amend = commit --amend --reuse-message=HEAD

	# Add & Commit at the same time.
	add-commit = ! "git add . && git commit -m"

	# Delete local branches that were deleted from remote
	# https://www.erikschierboom.com/2020/02/17/cleaning-up-local-git-branches-deleted-on-a-remote/
	prune-branches = ! "git fetch -p && git for-each-ref --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" {print $1}' | xargs -r git branch -D"

	# Pretty display for git log
	log-pretty = "log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"

[push]

	# Avoid having to type --setupstream and stuff when pushing a local branch that doesn't exist on the remote
	autoSetupRemote = true
